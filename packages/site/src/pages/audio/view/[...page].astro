---
import { Markdown } from '@astropub/md';
import Layout from '../../../layouts/Layout.astro';
import { createEntriesLoader } from '../../../libs/entries.mjs';

export async function getStaticPaths() {
  const loader = createEntriesLoader();
  const entries = await loader.getAudioFiles();
  return await Promise.all(entries.map(async(entry) => {
    const name = entry.replace('.mp3', '');
    const data = await import(
      /* @vite-ignore */
      `./../../../../public/entries/${name}.json`
    )
      .then((module) => module.default)
      .then((data) => ({ file: entry, data }));
    return {
      params: {
        page: name,
      },
      props: data,
    };
  }));
}

const { file, data } = Astro.props;
---

<Layout
  title='The Stochastic Parrot | Feeds on universal entropy to bring you random noise'
>
  <main>
    <div class='item-list-container'>
      <p class='intro'><a href='/audio' class='go-back'>Go Back</a></p>
      <div class='item'>
        <p>
          <code>
            <a href={`/audio/view/${data.id}`}>permalink</a> | created: {
              data.created
            } (
            {new Date(data.created * 1000).toISOString()}) | model: {
              data.model
            }{' '}
            | total_tokens: {data.usage.total_tokens}
          </code>
        </p>
        <div class='contents'>
          <figure>
            <figcaption>Listen to Polly:</figcaption>
            <audio
                controls
                src={`/audio/${file}`}>
                    <a href={`/audio/${file}`}>
                        Download audio
                    </a>
            </audio>
        </figure>
          <Markdown of={data.choices[0].message.content} />
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  const goBack = document.querySelector('.go-back');
  goBack.addEventListener('click', (e) => {
    e.preventDefault();
    window.history.back();
  });
</script>

<style>
  /** css for a psychadelic looking unordered list */
  .item-list-container {
    margin: 0 auto;
    padding: 0;
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    align-content: center;
    max-width: 80em;
    /* cursor: url('/images/avatar.png') auto; */
  }
  :global(.item-list-container h2) {
    font-family: 'Rubik Iso', cursive;
    font-size: 3rem;
  }
  .item-list-container .item {
    display: inline-block;
    margin: 0 1rem 1rem 0;
    padding: 1rem;
    background: #fff;
    border-radius: 0.5rem;
    box-shadow: 0 0 1rem rgba(0, 0, 0, 0.2);
  }

  .item-list-container .item:hover {
    cursor: crosshair;
    animation: float 1s ease-in-out infinite;
  }

  .item-list-container .item:nth-child(2n) {
    animation-delay: 1s;
  }
  .item-list-container .item:nth-child(3n) {
    animation-delay: 2s;
  }
  @keyframes float {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-0.25rem);
    }
    100% {
      transform: translateY(0);
    }
  }

  .button {
    margin: 0 0.5rem;
    text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-weight: 600;
  }

  .button--primary {
    background-color: #f5f5f5;
    color: #000;
    border: 1px solid #000;
    background: rgb(88, 235, 13);
    background: linear-gradient(
      180deg,
      rgba(255, 255, 255, 1) 26%,
      rgba(200, 200, 200, 1) 100%
    );
  }

  .button--primary:hover {
    background: rgb(200, 200, 200);
    background: linear-gradient(
      180deg,
      rgba(200, 200, 200, 1) 26%,
      rgba(255, 255, 255, 1) 100%
    );
  }

  .contents,
  .contents p {
    word-break: break-all;
    overflow: hidden;
  }
</style>
